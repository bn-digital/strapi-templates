### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentDataEntry {
  id: ID!
  key: String
  value: String!
}

input ComponentDataEntryFiltersInput {
  and: [ComponentDataEntryFiltersInput]
  key: StringFilterInput
  not: ComponentDataEntryFiltersInput
  or: [ComponentDataEntryFiltersInput]
  value: StringFilterInput
}

input ComponentDataEntryInput {
  id: ID
  key: String
  value: String
}

type ComponentDataSet {
  id: ID!
  value: String!
}

input ComponentDataSetFiltersInput {
  and: [ComponentDataSetFiltersInput]
  not: ComponentDataSetFiltersInput
  or: [ComponentDataSetFiltersInput]
  value: StringFilterInput
}

input ComponentDataSetInput {
  id: ID
  value: String
}

type ComponentSpecificTenantAssignment {
  id: ID!
  isDefault: Boolean
  role: ENUM_COMPONENTSPECIFICTENANTASSIGNMENT_ROLE
  tenant: TenantEntityResponse
}

input ComponentSpecificTenantAssignmentFiltersInput {
  and: [ComponentSpecificTenantAssignmentFiltersInput]
  isDefault: BooleanFilterInput
  not: ComponentSpecificTenantAssignmentFiltersInput
  or: [ComponentSpecificTenantAssignmentFiltersInput]
  role: StringFilterInput
  tenant: TenantFiltersInput
}

input ComponentSpecificTenantAssignmentInput {
  id: ID
  isDefault: Boolean
  role: ENUM_COMPONENTSPECIFICTENANTASSIGNMENT_ROLE
  tenant: ID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTSPECIFICTENANTASSIGNMENT_ROLE {
  admin
  editor
  member
  viewer
}

enum ENUM_PROJECT_FRAMETYPE {
  generic
  mobileNotch
}

enum ENUM_PROJECT_PROJECTTYPE {
  generic
  mobile
}

enum ENUM_SUBSCRIPTION_TIER {
  free_0
  paid1_0
  paid2_0
}

enum ENUM_TAGCATEGORY_TYPE {
  multi_select
  single_select
}

enum ENUM_TENANTTEAM_PERMISSIONS {
  admin
  editor
  onboarder
  viewer
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ComponentDataEntry | ComponentDataSet | ComponentSpecificTenantAssignment | Oauth2ServerAuthorizationCode | Oauth2ServerClient | Oauth2ServerToken | Project | Screen | Subscription | Tag | TagCategory | Tenant | TenantTeam | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  addScreen(data: ScreenInput!): ScreenEntityResponse

  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createOauth2ServerAuthorizationCode(data: Oauth2ServerAuthorizationCodeInput!): Oauth2ServerAuthorizationCodeEntityResponse
  createOauth2ServerClient(data: Oauth2ServerClientInput!): Oauth2ServerClientEntityResponse
  createOauth2ServerToken(data: Oauth2ServerTokenInput!): Oauth2ServerTokenEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  createScreen(data: ScreenInput!): ScreenEntityResponse
  createSubscription(data: SubscriptionInput!): SubscriptionEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createTagCategory(data: TagCategoryInput!): TagCategoryEntityResponse
  createTenant(data: TenantInput!): TenantEntityResponse
  createTenantTeam(data: TenantTeamInput!): TenantTeamEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteMe: UsersPermissionsUser
  deleteOauth2ServerAuthorizationCode(id: ID!): Oauth2ServerAuthorizationCodeEntityResponse
  deleteOauth2ServerClient(id: ID!): Oauth2ServerClientEntityResponse
  deleteOauth2ServerToken(id: ID!): Oauth2ServerTokenEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  deleteScreen(id: ID!): ScreenEntityResponse
  deleteSubscription(id: ID!): SubscriptionEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteTagCategory(id: ID!): TagCategoryEntityResponse
  deleteTenant(id: ID!): TenantEntityResponse
  deleteTenantTeam(id: ID!): TenantTeamEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  softDeleteProject(id: ID!): ProjectEntity!
  softDeleteScreen(id: ID!): ScreenEntity!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateMyTeamAssignment(role: ENUM_TENANTTEAM_PERMISSIONS!, tenantID: ID!): UsersPermissionsUser
  updateOauth2ServerAuthorizationCode(data: Oauth2ServerAuthorizationCodeInput!, id: ID!): Oauth2ServerAuthorizationCodeEntityResponse
  updateOauth2ServerClient(data: Oauth2ServerClientInput!, id: ID!): Oauth2ServerClientEntityResponse
  updateOauth2ServerToken(data: Oauth2ServerTokenInput!, id: ID!): Oauth2ServerTokenEntityResponse
  updateProject(data: ProjectInput!, id: ID!): ProjectEntityResponse
  updateProjectOrder(id: ID!): ProjectEntity!
  updateProjectPreview(id: ID!): Boolean!
  updateScreen(data: ScreenInput!, id: ID!): ScreenEntityResponse
  updateSubscription(data: SubscriptionInput!, id: ID!): SubscriptionEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateTagCategory(data: TagCategoryInput!, id: ID!): TagCategoryEntityResponse
  updateTenant(data: TenantInput!, id: ID!): TenantEntityResponse
  updateTenantTeam(data: TenantTeamInput!, id: ID!): TenantTeamEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Oauth2ServerAuthorizationCode {
  client: Oauth2ServerClientEntityResponse
  codeChallenge: String
  createdAt: DateTime
  expiresAt: DateTime
  readKey: String
  readKeyUsedAt: DateTime
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
  writeKey: String
  writeKeyUsedAt: DateTime
}

type Oauth2ServerAuthorizationCodeEntity {
  attributes: Oauth2ServerAuthorizationCode
  id: ID
}

type Oauth2ServerAuthorizationCodeEntityResponse {
  data: Oauth2ServerAuthorizationCodeEntity
}

type Oauth2ServerAuthorizationCodeEntityResponseCollection {
  data: [Oauth2ServerAuthorizationCodeEntity!]!
  meta: ResponseCollectionMeta!
}

input Oauth2ServerAuthorizationCodeFiltersInput {
  and: [Oauth2ServerAuthorizationCodeFiltersInput]
  authorizationCode: StringFilterInput
  client: Oauth2ServerClientFiltersInput
  codeChallenge: StringFilterInput
  createdAt: DateTimeFilterInput
  expiresAt: DateTimeFilterInput
  id: IDFilterInput
  not: Oauth2ServerAuthorizationCodeFiltersInput
  or: [Oauth2ServerAuthorizationCodeFiltersInput]
  readKey: StringFilterInput
  readKeyUsedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
  writeKey: StringFilterInput
  writeKeyUsedAt: DateTimeFilterInput
}

input Oauth2ServerAuthorizationCodeInput {
  authorizationCode: String
  client: ID
  codeChallenge: String
  expiresAt: DateTime
  readKey: String
  readKeyUsedAt: DateTime
  user: ID
  writeKey: String
  writeKeyUsedAt: DateTime
}

type Oauth2ServerAuthorizationCodeRelationResponseCollection {
  data: [Oauth2ServerAuthorizationCodeEntity!]!
}

type Oauth2ServerClient {
  clientId: String!
  createdAt: DateTime
  grants: String
  publishedAt: DateTime
  redirectUris: String
  updatedAt: DateTime
}

type Oauth2ServerClientEntity {
  attributes: Oauth2ServerClient
  id: ID
}

type Oauth2ServerClientEntityResponse {
  data: Oauth2ServerClientEntity
}

type Oauth2ServerClientEntityResponseCollection {
  data: [Oauth2ServerClientEntity!]!
  meta: ResponseCollectionMeta!
}

input Oauth2ServerClientFiltersInput {
  and: [Oauth2ServerClientFiltersInput]
  clientId: StringFilterInput
  clientSecret: StringFilterInput
  createdAt: DateTimeFilterInput
  grants: StringFilterInput
  id: IDFilterInput
  not: Oauth2ServerClientFiltersInput
  or: [Oauth2ServerClientFiltersInput]
  publishedAt: DateTimeFilterInput
  redirectUris: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input Oauth2ServerClientInput {
  clientId: String
  clientSecret: String
  grants: String
  publishedAt: DateTime
  redirectUris: String
}

type Oauth2ServerClientRelationResponseCollection {
  data: [Oauth2ServerClientEntity!]!
}

type Oauth2ServerToken {
  accessTokenExpiresAt: DateTime
  client: Oauth2ServerClientEntityResponse
  createdAt: DateTime
  refreshToken: String
  refreshTokenExpiresAt: DateTime
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type Oauth2ServerTokenEntity {
  attributes: Oauth2ServerToken
  id: ID
}

type Oauth2ServerTokenEntityResponse {
  data: Oauth2ServerTokenEntity
}

type Oauth2ServerTokenEntityResponseCollection {
  data: [Oauth2ServerTokenEntity!]!
  meta: ResponseCollectionMeta!
}

input Oauth2ServerTokenFiltersInput {
  accessToken: StringFilterInput
  accessTokenExpiresAt: DateTimeFilterInput
  and: [Oauth2ServerTokenFiltersInput]
  client: Oauth2ServerClientFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: Oauth2ServerTokenFiltersInput
  or: [Oauth2ServerTokenFiltersInput]
  refreshToken: StringFilterInput
  refreshTokenExpiresAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input Oauth2ServerTokenInput {
  accessToken: String
  accessTokenExpiresAt: DateTime
  client: ID
  refreshToken: String
  refreshTokenExpiresAt: DateTime
  user: ID
}

type Oauth2ServerTokenRelationResponseCollection {
  data: [Oauth2ServerTokenEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Project {
  backgroundColor: String
  createdAt: DateTime
  deletedAt: DateTime
  figmaConnectionLink: String
  frameColor: String
  frameType: ENUM_PROJECT_FRAMETYPE
  imagePreview: String
  name: String!
  order: JSON
  previewUpdatedAt: DateTime
  projectType: ENUM_PROJECT_PROJECTTYPE!
  screens(filters: ScreenFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScreenRelationResponseCollection
  screensCount: Int
  screensUpdatedAt: DateTime
  source: String
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  tenant: TenantEntityResponse
  uiColor: String
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  and: [ProjectFiltersInput]
  backgroundColor: StringFilterInput
  createdAt: DateTimeFilterInput
  deletedAt: DateTimeFilterInput
  figmaConnectionLink: StringFilterInput
  frameColor: StringFilterInput
  frameType: StringFilterInput
  id: IDFilterInput
  imagePreview: StringFilterInput
  name: StringFilterInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  order: JSONFilterInput
  previewUpdatedAt: DateTimeFilterInput
  projectType: StringFilterInput
  screens: ScreenFiltersInput
  screensCount: IntFilterInput
  screensUpdatedAt: DateTimeFilterInput
  source: StringFilterInput
  tags: TagFiltersInput
  tenant: TenantFiltersInput
  uiColor: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  backgroundColor: String
  deletedAt: DateTime
  figmaConnectionLink: String
  frameColor: String
  frameType: ENUM_PROJECT_FRAMETYPE
  imagePreview: String
  name: String
  order: JSON
  previewUpdatedAt: DateTime
  projectType: ENUM_PROJECT_PROJECTTYPE
  screens: [ID]
  screensCount: Int
  screensUpdatedAt: DateTime
  source: String
  tags: [ID]
  tenant: ID
  uiColor: String
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  availableTenants: [TenantEntity!]
  availableTenantsTeamsUsers: [TenantEntity!]
  me: UsersPermissionsUser
  oauth2ServerAuthorizationCode(id: ID): Oauth2ServerAuthorizationCodeEntityResponse
  oauth2ServerAuthorizationCodes(filters: Oauth2ServerAuthorizationCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): Oauth2ServerAuthorizationCodeEntityResponseCollection
  oauth2ServerClient(id: ID): Oauth2ServerClientEntityResponse
  oauth2ServerClients(filters: Oauth2ServerClientFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): Oauth2ServerClientEntityResponseCollection
  oauth2ServerToken(id: ID): Oauth2ServerTokenEntityResponse
  oauth2ServerTokens(filters: Oauth2ServerTokenFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): Oauth2ServerTokenEntityResponseCollection
  project(id: ID): ProjectEntityResponse
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ProjectEntityResponseCollection
  queryProjects: [ProjectEntityResponseCollection!]
  screen(id: ID): ScreenEntityResponse
  screens(filters: ScreenFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScreenEntityResponseCollection
  subscription(id: ID): SubscriptionEntityResponse
  subscriptions(filters: SubscriptionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SubscriptionEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tagCategories(filters: TagCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagCategoryEntityResponseCollection
  tagCategory(id: ID): TagCategoryEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
  tenant(id: ID): TenantEntityResponse
  tenantTeam(id: ID): TenantTeamEntityResponse
  tenantTeams(filters: TenantTeamFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TenantTeamEntityResponseCollection
  tenants(filters: TenantFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TenantEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Screen {
  createdAt: DateTime
  deletedAt: DateTime
  density: Float
  height: Int
  media: UploadFileEntityResponse
  name: String
  project: ProjectEntityResponse
  publishedAt: DateTime
  updatedAt: DateTime
  width: Int
}

type ScreenEntity {
  attributes: Screen
  id: ID
}

type ScreenEntityResponse {
  data: ScreenEntity
}

type ScreenEntityResponseCollection {
  data: [ScreenEntity!]!
  meta: ResponseCollectionMeta!
}

input ScreenFiltersInput {
  and: [ScreenFiltersInput]
  createdAt: DateTimeFilterInput
  deletedAt: DateTimeFilterInput
  density: FloatFilterInput
  height: IntFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ScreenFiltersInput
  or: [ScreenFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  width: IntFilterInput
}

input ScreenInput {
  deletedAt: DateTime
  density: Float
  height: Int
  media: ID
  name: String
  project: ID
  publishedAt: DateTime
  width: Int
}

type ScreenRelationResponseCollection {
  data: [ScreenEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Subscription {
  createdAt: DateTime
  endDate: Date
  startDate: Date
  tenant: TenantEntityResponse
  tier: ENUM_SUBSCRIPTION_TIER
  updatedAt: DateTime
}

type SubscriptionEntity {
  attributes: Subscription
  id: ID
}

type SubscriptionEntityResponse {
  data: SubscriptionEntity
}

type SubscriptionEntityResponseCollection {
  data: [SubscriptionEntity!]!
  meta: ResponseCollectionMeta!
}

input SubscriptionFiltersInput {
  and: [SubscriptionFiltersInput]
  createdAt: DateTimeFilterInput
  endDate: DateFilterInput
  id: IDFilterInput
  not: SubscriptionFiltersInput
  or: [SubscriptionFiltersInput]
  startDate: DateFilterInput
  tenant: TenantFiltersInput
  tier: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SubscriptionInput {
  endDate: Date
  startDate: Date
  tenant: ID
  tier: ENUM_SUBSCRIPTION_TIER
}

type SubscriptionRelationResponseCollection {
  data: [SubscriptionEntity!]!
}

type Tag {
  createdAt: DateTime
  displayName: String
  isSystem: Boolean
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ProjectRelationResponseCollection
  tag_category: TagCategoryEntityResponse
  updatedAt: DateTime
}

type TagCategory {
  createdAt: DateTime
  displayName: String
  isLocked: Boolean
  isSystem: Boolean!
  order: JSON
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  type: ENUM_TAGCATEGORY_TYPE!
  updatedAt: DateTime
}

type TagCategoryEntity {
  attributes: TagCategory
  id: ID
}

type TagCategoryEntityResponse {
  data: TagCategoryEntity
}

type TagCategoryEntityResponseCollection {
  data: [TagCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input TagCategoryFiltersInput {
  and: [TagCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  displayName: StringFilterInput
  id: IDFilterInput
  isLocked: BooleanFilterInput
  isSystem: BooleanFilterInput
  not: TagCategoryFiltersInput
  or: [TagCategoryFiltersInput]
  order: JSONFilterInput
  tags: TagFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TagCategoryInput {
  displayName: String
  isLocked: Boolean
  isSystem: Boolean
  order: JSON
  tags: [ID]
  type: ENUM_TAGCATEGORY_TYPE
}

type TagCategoryRelationResponseCollection {
  data: [TagCategoryEntity!]!
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  createdAt: DateTimeFilterInput
  displayName: StringFilterInput
  id: IDFilterInput
  isSystem: BooleanFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  projects: ProjectFiltersInput
  tag_category: TagCategoryFiltersInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  displayName: String
  isSystem: Boolean
  projects: [ID]
  tag_category: ID
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

type Tenant {
  companyName: String
  createdAt: DateTime
  deletedAt: DateTime
  domain: String
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ProjectRelationResponseCollection
  slug: String
  subscription: SubscriptionEntityResponse
  tag_categories(filters: TagCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagCategoryRelationResponseCollection
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  tenant_teams(filters: TenantTeamFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TenantTeamRelationResponseCollection
  updatedAt: DateTime
}

type TenantEntity {
  attributes: Tenant
  id: ID
}

type TenantEntityResponse {
  data: TenantEntity
}

type TenantEntityResponseCollection {
  data: [TenantEntity!]!
  meta: ResponseCollectionMeta!
}

input TenantFiltersInput {
  and: [TenantFiltersInput]
  companyName: StringFilterInput
  createdAt: DateTimeFilterInput
  deletedAt: DateTimeFilterInput
  domain: StringFilterInput
  id: IDFilterInput
  not: TenantFiltersInput
  or: [TenantFiltersInput]
  projects: ProjectFiltersInput
  slug: StringFilterInput
  subscription: SubscriptionFiltersInput
  tag_categories: TagCategoryFiltersInput
  tags: TagFiltersInput
  tenant_teams: TenantTeamFiltersInput
  updatedAt: DateTimeFilterInput
}

input TenantInput {
  companyName: String
  deletedAt: DateTime
  domain: String
  projects: [ID]
  slug: String
  subscription: ID
  tag_categories: [ID]
  tags: [ID]
  tenant_teams: [ID]
}

type TenantRelationResponseCollection {
  data: [TenantEntity!]!
}

type TenantTeam {
  createdAt: DateTime
  permissions: ENUM_TENANTTEAM_PERMISSIONS
  tenant: TenantEntityResponse
  updatedAt: DateTime
  users_permissions_users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type TenantTeamEntity {
  attributes: TenantTeam
  id: ID
}

type TenantTeamEntityResponse {
  data: TenantTeamEntity
}

type TenantTeamEntityResponseCollection {
  data: [TenantTeamEntity!]!
  meta: ResponseCollectionMeta!
}

input TenantTeamFiltersInput {
  and: [TenantTeamFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: TenantTeamFiltersInput
  or: [TenantTeamFiltersInput]
  permissions: StringFilterInput
  tenant: TenantFiltersInput
  updatedAt: DateTimeFilterInput
  users_permissions_users: UsersPermissionsUserFiltersInput
}

input TenantTeamInput {
  permissions: ENUM_TENANTTEAM_PERMISSIONS
  tenant: ID
  users_permissions_users: [ID]
}

type TenantTeamRelationResponseCollection {
  data: [TenantTeamEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  defaultTenantID: String
  email: String!
  firstName: String
  id: ID!
  isProjectPreviewVisible: Boolean
  lastName: String
  provider: String
  registeredAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  tenant_teams(filters: TenantTeamFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TenantTeamRelationResponseCollection
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  defaultTenantID: StringFilterInput
  email: StringFilterInput
  firstName: StringFilterInput
  id: IDFilterInput
  isProjectPreviewVisible: BooleanFilterInput
  lastName: StringFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  registeredAt: DateTimeFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  tenant_teams: TenantTeamFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  defaultTenantID: String
  email: String
  firstName: String
  isProjectPreviewVisible: Boolean
  lastName: String
  password: String
  provider: String
  registeredAt: DateTime
  resetPasswordToken: String
  role: ID
  tenant_teams: [ID]
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
